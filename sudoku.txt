# Define function to get Sudoku grid input from the user
def get_user_input():
    print("Enter the Sudoku puzzle row by row, with 0 representing empty cells.")
    print("Each row should contain 9 numbers, separated by spaces.")
    
    grid = []
    for i in range(9):
        while True:
            try:
                row = input(f"Row {i + 1}: ").strip().split()
                # Check if the row has exactly 9 numbers
                if len(row) != 9:
                    print("Each row must contain exactly 9 numbers. Try again.")
                    continue
                # Convert each number to an integer and check if it's between 0 and 9
                row = [int(num) for num in row]
                if any(num < 0 or num > 9 for num in row):
                    print("Each number must be between 0 and 9. Try again.")
                    continue
                # Append the validated row to the grid
                grid.append(row)
                break
            except ValueError:
                print("Invalid input. Please enter numbers only.")
    return grid

# Function to display the Sudoku grid
def print_grid(grid):
    for row in grid:
        print(" ".join(str(num) if num != 0 else "." for num in row))

# Check if it's valid to place num in grid[row][col]
def is_valid(grid, row, col, num):
    # Check if num is in the current row
    if num in grid[row]:
        return False
    # Check if num is in the current column
    if num in [grid[i][col] for i in range(9)]:
        return False
    # Check if num is in the current 3x3 box
    box_row, box_col = (row // 3) * 3, (col // 3) * 3
    for i in range(box_row, box_row + 3):
        for j in range(box_col, box_col + 3):
            if grid[i][j] == num:
                return False
    return True

# Recursive function to solve the Sudoku puzzle
def solve_sudoku(grid):
    for row in range(9):
        for col in range(9):
            # Find an empty cell (represented by 0)
            if grid[row][col] == 0:
                # Try placing numbers 1 to 9 in the empty cell
                for num in range(1, 10):
                    if is_valid(grid, row, col, num):
                        grid[row][col] = num  # Place num in the cell
                        # Recursively try to solve the rest of the grid
                        if solve_sudoku(grid):
                            return True
                        # If placing num didn't lead to a solution, backtrack
                        grid[row][col] = 0
                return False  # No valid number found, need to backtrack
    return True  # Solved

# Main program
if _name_ == "_main_":
    # Get user input for the Sudoku puzzle
    sudoku_grid = get_user_input()
    
    # Display the original grid
    print("\nOriginal Sudoku Puzzle:")
    print_grid(sudoku_grid)

    # Solve the Sudoku puzzle
    if solve_sudoku(sudoku_grid):
        print("\nSolved Sudoku Puzzle:")
        print_grid(sudoku_grid)
    else:
        print("No solution exists for this Sudoku puzzle.")